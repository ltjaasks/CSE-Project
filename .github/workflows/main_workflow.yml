# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Main workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    env:
      OWM_API_KEY: ${{ secrets.OWM_API_KEY }}
      WA_API_KEY: ${{ secrets.WA_API_KEY }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Set up Python 3.11
      uses: actions/setup-python@v3
      with:
        python-version: "3.11"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
  test:
    runs-on: ubuntu-latest
    env:
      OWM_API_KEY: ${{ secrets.OWM_API_KEY }}
      WA_API_KEY: ${{ secrets.WA_API_KEY }}
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v3
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Run tests with pytest
        run: pytest tests/test.py
      - name: Run static security testing with Bandit 
        uses: mdegis/bandit-action@v1.0
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          path: "."
          level: high
          confidence: high
          exit_zero: true   

        
  docker-image:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ vars.DOCKER_USERNAME }}/cse-project:latest


  minikube-deployment:
    needs: [docker-image]
    runs-on: ubuntu-latest
    name: deploy to minikube
    steps:
      - uses: actions/checkout@v4
        with:
          repository: ltjaasks/cse-project
      - name: Start minikube
        uses: medyagh/setup-minikube@latest
      - name: Try the cluster
        run: kubectl get pods -A
      - name: Deploy
        run: |
          kubectl apply -f kubernetes/deployment.yaml
          kubectl apply -f kubernetes/service.yaml
          kubectl wait --for=condition=ready pod -l app=cse-project
      - name: Test service urls
        run: |
          minikube service list
          minikube service cse-project-service --url
          echo "------------------opening the service------------------"
          curl $(minikube service cse-project-service --url)
